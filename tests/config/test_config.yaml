# Test Configuration for Online Shop Application

# Database configuration for testing
database:
  host: "localhost"
  port: 5432
  user: "testuser"
  password: "testpass"
  dbname: "testdb"
  sslmode: "disable"
  max_open_conns: 10
  max_idle_conns: 5
  conn_max_lifetime: "1h"

# Redis configuration for testing
redis:
  host: "localhost"
  port: 6379
  password: ""
  db: 0
  pool_size: 10
  min_idle_conns: 5
  max_retries: 3
  retry_delay: "1s"
  dial_timeout: "5s"
  read_timeout: "3s"
  write_timeout: "3s"

# RabbitMQ configuration for testing
rabbitmq:
  host: "localhost"
  port: 5672
  username: "guest"
  password: "guest"
  vhost: "/"
  exchange: "test_exchange"
  connection_timeout: 30
  heartbeat: 60
  max_retries: 3
  retry_delay: 5

# SMTP configuration for testing
smtp:
  host: "localhost"
  port: 1025
  username: ""
  password: ""
  from_email: "test@example.com"
  from_name: "Test Service"
  use_tls: false
  use_ssl: false
  timeout: 10
  max_retries: 2
  retry_delay: 1

# Logger configuration for testing
logger:
  level: "debug"
  format: "json"
  output: ["console"]
  file_path: "/tmp/test.log"
  max_size: 10
  max_backups: 3
  max_age: 7
  compress: false
  local_time: true

# Worker pool configuration for testing
workers:
  email:
    workers: 2
    queue_size: 10
    timeout: "30s"
  invoice:
    workers: 1
    queue_size: 5
    timeout: "60s"
  notification:
    workers: 2
    queue_size: 15
    timeout: "30s"
  analytics:
    workers: 1
    queue_size: 20
    timeout: "10s"

# Test-specific settings
test:
  # Container settings
  containers:
    postgres:
      image: "postgres:15-alpine"
      port: 5432
      env:
        POSTGRES_DB: "testdb"
        POSTGRES_USER: "testuser"
        POSTGRES_PASSWORD: "testpass"
    
    redis:
      image: "redis:7-alpine"
      port: 6379
    
    rabbitmq:
      image: "rabbitmq:3.12-management-alpine"
      port: 5672
      management_port: 15672
      env:
        RABBITMQ_DEFAULT_USER: "guest"
        RABBITMQ_DEFAULT_PASS: "guest"
    
    mailhog:
      image: "mailhog/mailhog:latest"
      smtp_port: 1025
      web_port: 8025

  # Test data settings
  data:
    users:
      count: 100
      email_domain: "test.example.com"
    
    products:
      count: 50
      price_range:
        min: 10.0
        max: 1000.0
    
    orders:
      count: 200
      status_distribution:
        pending: 0.3
        processing: 0.2
        shipped: 0.3
        delivered: 0.15
        cancelled: 0.05

  # Performance test settings
  performance:
    concurrent_users: 10
    operations_per_user: 100
    timeout: "30s"
    
    # Load test thresholds
    thresholds:
      response_time_p95: "500ms"
      error_rate: 0.01
      throughput_min: 100

  # Integration test settings
  integration:
    timeout: "60s"
    retry_attempts: 3
    retry_delay: "5s"
    
    # Service health check settings
    health_checks:
      database:
        timeout: "10s"
        query: "SELECT 1"
      
      redis:
        timeout: "5s"
        command: "PING"
      
      rabbitmq:
        timeout: "10s"
        queue: "health_check"

# Mock settings
mocks:
  # External service mocks
  payment_service:
    enabled: true
    success_rate: 0.95
    response_delay: "100ms"
  
  email_service:
    enabled: true
    success_rate: 0.98
    response_delay: "50ms"
  
  notification_service:
    enabled: true
    success_rate: 0.99
    response_delay: "30ms"

# Test environment settings
environment:
  name: "test"
  debug: true
  log_level: "debug"
  
  # Feature flags for testing
  features:
    enable_caching: true
    enable_metrics: true
    enable_tracing: false
    enable_rate_limiting: false

# Cleanup settings
cleanup:
  # Auto cleanup after tests
  auto_cleanup: true
  
  # Cleanup strategies
  strategies:
    database:
      truncate_tables: true
      reset_sequences: true
    
    redis:
      flush_db: true
    
    rabbitmq:
      purge_queues: true
      delete_exchanges: false
    
    files:
      temp_directories: ["/tmp/test_*"]
      log_files: ["/tmp/test*.log"]

# Reporting settings
reporting:
  # Test report formats
  formats: ["json", "xml", "html"]
  
  # Output directory
  output_dir: "./test_reports"
  
  # Coverage settings
  coverage:
    enabled: true
    threshold: 80.0
    exclude_patterns:
      - "*/mocks/*"
      - "*/tests/*"
      - "*_test.go"
  
  # Benchmark settings
  benchmarks:
    enabled: true
    iterations: 1000
    duration: "30s"