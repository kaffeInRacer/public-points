name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - prerelease
          - hotfix
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string

env:
  GO_VERSION: '1.19'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      is_prerelease: ${{ steps.validate.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version format
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          
          # Ensure version starts with 'v'
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Version must follow semantic versioning: v1.2.3 or v1.2.3-alpha.1"
            exit 1
          fi
          
          # Check if tag already exists
          if git tag -l | grep -q "^$VERSION$"; then
            echo "❌ Tag $VERSION already exists"
            exit 1
          fi
          
          # Determine if prerelease
          IS_PRERELEASE="false"
          if [[ $VERSION =~ -.*$ ]] || [[ $RELEASE_TYPE == "prerelease" ]]; then
            IS_PRERELEASE="true"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "✅ Version $VERSION is valid"
          echo "📦 Release type: $RELEASE_TYPE"
          echo "🔖 Prerelease: $IS_PRERELEASE"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run linting
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
          golangci-lint run --timeout=5m

      - name: Run unit tests
        run: |
          mkdir -p test_reports/coverage
          go test -v -race -coverprofile=test_reports/coverage/coverage.out -covermode=atomic ./tests/unit/...

      - name: Run integration tests
        env:
          DATABASE_URL: postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable
          REDIS_URL: redis://localhost:6379/0
        run: |
          go test -v -race -timeout=10m ./tests/integration/...

      - name: Check coverage
        run: |
          COVERAGE=$(go tool cover -func=test_reports/coverage/coverage.out | grep "total:" | awk '{print $3}' | sed 's/%//')
          echo "Coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Coverage ${COVERAGE}% is below threshold 80%"
            exit 1
          fi
          echo "✅ Coverage ${COVERAGE}% meets threshold"

  build:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [validate, test]
    outputs:
      build-time: ${{ steps.build.outputs.build-time }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build release artifacts
        id: build
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          GO_VERSION=$(go version | awk '{print $3}')
          
          echo "build-time=$BUILD_TIME" >> $GITHUB_OUTPUT
          
          mkdir -p release
          
          # Build for multiple platforms
          platforms=(
            "linux/amd64"
            "linux/arm64"
            "darwin/amd64"
            "darwin/arm64"
            "windows/amd64"
          )
          
          for platform in "${platforms[@]}"; do
            IFS='/' read -ra PLATFORM_PARTS <<< "$platform"
            GOOS=${PLATFORM_PARTS[0]}
            GOARCH=${PLATFORM_PARTS[1]}
            
            output_name="online-shop-${GOOS}-${GOARCH}"
            if [ $GOOS = "windows" ]; then
              output_name+='.exe'
            fi
            
            echo "Building for $GOOS/$GOARCH..."
            GOOS=$GOOS GOARCH=$GOARCH go build \
              -ldflags "-X main.version=$VERSION -X main.buildTime=$BUILD_TIME -X main.goVersion=$GO_VERSION" \
              -o "release/$output_name" ./cmd/server
            
            # Create compressed archive
            if [ $GOOS = "windows" ]; then
              zip -j "release/online-shop-${GOOS}-${GOARCH}.zip" "release/$output_name"
            else
              tar -czf "release/online-shop-${GOOS}-${GOARCH}.tar.gz" -C release "$output_name"
            fi
          done
          
          # Generate checksums
          cd release
          sha256sum * > checksums.txt
          cd ..
          
          echo "✅ Built release artifacts for $VERSION"

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: release/

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [validate, test]
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.validate.outputs.version }}
            type=raw,value=latest,enable=${{ needs.validate.outputs.is_prerelease == 'false' }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate.outputs.version }}
            BUILD_TIME=${{ needs.build.outputs.build-time }}

      - name: Output image
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version }}" >> $GITHUB_OUTPUT

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, test, build, docker]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts
          path: release/

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          # Get the latest tag before this release
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## 📋 Changes since $PREVIOUS_TAG" > changelog.md
            echo "" >> changelog.md
            
            # Get commits since last tag
            git log $PREVIOUS_TAG..HEAD --oneline --pretty=format:"- %s (%h)" >> changelog.md
          else
            echo "## 📋 Initial Release" > changelog.md
            echo "" >> changelog.md
            echo "This is the initial release of the Online Shop application." >> changelog.md
          fi
          
          echo "" >> changelog.md

      - name: Create and push tag
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
          
          # Create tag message
          TAG_MESSAGE="Release $VERSION"
          if [ -n "$RELEASE_NOTES" ]; then
            TAG_MESSAGE="$TAG_MESSAGE

$RELEASE_NOTES"
          fi
          
          # Create annotated tag
          git tag -a "$VERSION" -m "$TAG_MESSAGE"
          git push origin "$VERSION"
          
          echo "✅ Created and pushed tag: $VERSION"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          release_name: Release ${{ needs.validate.outputs.version }}
          body: |
            ## 🚀 Release ${{ needs.validate.outputs.version }}
            
            **Release Type**: ${{ github.event.inputs.release_type }}
            
            ${{ github.event.inputs.release_notes }}
            
            ### 📦 Artifacts
            - **Docker Image**: `${{ needs.docker.outputs.image }}`
            - **Build Time**: ${{ needs.build.outputs.build-time }}
            - **Go Version**: ${{ env.GO_VERSION }}
            
            $(cat changelog.md)
            
            ### 🐳 Docker Usage
            ```bash
            docker pull ${{ needs.docker.outputs.image }}
            docker run -p 8080:8080 ${{ needs.docker.outputs.image }}
            ```
            
            ### 📥 Download Binaries
            Choose the appropriate binary for your platform:
            
            | Platform | Architecture | Download |
            |----------|--------------|----------|
            | Linux | AMD64 | [online-shop-linux-amd64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.validate.outputs.version }}/online-shop-linux-amd64.tar.gz) |
            | Linux | ARM64 | [online-shop-linux-arm64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.validate.outputs.version }}/online-shop-linux-arm64.tar.gz) |
            | macOS | AMD64 | [online-shop-darwin-amd64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.validate.outputs.version }}/online-shop-darwin-amd64.tar.gz) |
            | macOS | ARM64 | [online-shop-darwin-arm64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.validate.outputs.version }}/online-shop-darwin-arm64.tar.gz) |
            | Windows | AMD64 | [online-shop-windows-amd64.zip](https://github.com/${{ github.repository }}/releases/download/${{ needs.validate.outputs.version }}/online-shop-windows-amd64.zip) |
            
            ### 🔐 Verification
            Download [checksums.txt](https://github.com/${{ github.repository }}/releases/download/${{ needs.validate.outputs.version }}/checksums.txt) to verify file integrity.
            
            ### 📊 Test Results
            - ✅ Unit Tests: Passed
            - ✅ Integration Tests: Passed
            - ✅ Security Scan: Passed
            - ✅ Code Quality: Passed
            
            ### 🔗 Links
            - [Docker Image](${{ env.REGISTRY }}/${{ env.IMAGE_NAME }})
            - [Source Code](https://github.com/${{ github.repository }}/tree/${{ needs.validate.outputs.version }})
            - [Documentation](https://github.com/${{ github.repository }}/blob/${{ needs.validate.outputs.version }}/README.md)
          draft: false
          prerelease: ${{ needs.validate.outputs.is_prerelease == 'true' }}

      - name: Upload release assets
        run: |
          RELEASE_ID="${{ steps.create_release.outputs.id }}"
          
          # Upload all release artifacts
          for file in release/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Uploading $filename..."
              
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$file" \
                "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=$filename"
            fi
          done

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate, test, build, docker, create-release]
    if: always()
    steps:
      - name: Notify success
        if: needs.test.result == 'success' && needs.build.result == 'success' && needs.docker.result == 'success' && needs.create-release.result == 'success'
        run: |
          echo "🎉 Release ${{ needs.validate.outputs.version }} created successfully!"
          echo "🐳 Docker image: ${{ needs.docker.outputs.image }}"
          echo "📦 Release type: ${{ github.event.inputs.release_type }}"
          echo "🔖 Prerelease: ${{ needs.validate.outputs.is_prerelease }}"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.version }}"

      - name: Notify failure
        if: needs.test.result == 'failure' || needs.build.result == 'failure' || needs.docker.result == 'failure' || needs.create-release.result == 'failure'
        run: |
          echo "❌ Release ${{ needs.validate.outputs.version }} failed!"
          echo "Please check the workflow logs for details."
          exit 1